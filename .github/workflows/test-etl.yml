# ====================================================================
# DEPRECATED: This pipeline has been replaced by azure-pipelines.yml
# Please use azure-pipelines.yml for all CI/CD operations
# ====================================================================

name: ETL Pipeline Validation

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de ejecución'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - staging
      execution_mode:
        description: 'Modo de ejecución'
        required: true
        default: 'full'
        type: choice
        options:
        - full
        - quick
        - single

env:
  PYTHON_VERSION: '3.10'
  TEST_DATA_PATH: './data/test'
  STAGING_DATA_PATH: './data/staging'
  LOG_PATH: './logs'
  CONFIG_PATH: './config'

jobs:
  validate-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Configure Environment
        run: |
          mkdir -p ${{ env.TEST_DATA_PATH }}/{input,output,temp}
          mkdir -p ${{ env.STAGING_DATA_PATH }}/{input,output,temp}
          mkdir -p ${{ env.LOG_PATH }}
          mkdir -p ${{ env.CONFIG_PATH }}

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Security Scan
        run: |
          safety check
          bandit -r . -c bandit.yaml
          
      - name: Code Quality Check
        run: |
          pylint $(find . -name "*.py") --rcfile=.pylintrc
          black . --check
          isort . --check-only

      - name: Execute ETL Tests
        run: |
          ETL_SCRIPTS=(
            # Cancelaciones
            "cargue_datos_crudos_base_canceladas/cargue_datos_crudos_canceladas.py"
            "cargue_datos_crudos_base_canceladas_999/cargue_datos_crudos_canceladas_999.py"
            
            # Digitaciones
            "cargue_datos_crudos_base_digitadas/cargue_datos_crudos_digitadas.py"
            "cargue_datos_crudos_base_digitadas_up/cargue_datos_crudos_digitadas_up.py"
            "cargue_datos_crudos_denodo_digitadas_rr/cargue_datos_crudos_digitadas_rr.py"
            
            # Instalaciones
            "cargue_datos_crudos_base_instaladas/cargue_datos_crudos_instaladas.py"
            "cargue_datos_crudos_base_instaladas_up/cargue_datos_crudos_instaladas_up.py"
            "cargue_datos_crudos_base_instaladas_999/cargue_datos_crudos_instaladas_999.py"
            
            # Servicios y Productos
            "cargue_datos_crudos_base_cloud/cargue_datos_crudos_cloud.py"
            "cargue_datos_crudos_base_ngn_larga_distancia_nacional/cargue_datos_crudos_base_ngn_larga_distancia_nacional.py"
            "cargue_datos_crudos_base_red_fttx/cargue_datos_crudos_red_fttx.py"
            "cargue_datos_crudos_servicios_movil/fuentes_cruda_servicios_movil.py"
            
            # Ventas y Comercial
            "cargue_datos_crudos_base_digitadas_comercial/fuentes_crudas_digitadas_comercial.py"
            "cargue_datos_crudos_ventas_manuales/Ventas_manuales.py"
            "cargue_datos_crudos_valor_agregado/cargue_datos_crudos_valor_agregado.py"
            "cargue_datos_crudos_base_liquidacion_fija/cargue_datos_crudos_liquidacion_fija.py"
            
            # Legalizaciones y Conciliaciones
            "cargue_datos_crudos_legalizadas/cargue_datos_crudos_legalizadas.py"
            "cargue_datos_crudos_conciliaciones/conciliaciones.py"
            "cargue_datos_crudos_conciliaciones_up/conciliaciones_up.py"
            
            # Metas y Planeación
            "cargue_datos_crudos_metas/cargue_datos_crudos_metas.py"
            "cargue_datos_crudos_metas_oficial/cargue_datos_crudos_metas_oficial.py"
            "cargue_datos_crudos_planta_comercial/cargue_datos_crudos_planta_comercial.py"
            
            # Causales y Estados
            "cargue_datos_crudos_causales/fuentes_crudas_causales.py"
            "cargue_datos_crudos_estados_ordenes/estados_ordenes.py"
            
            # Transfers y Movimientos
            "cargue_datos_crudos_transfers/transfers_crudos.py"
            "cargue_datos_crudos_transfers_up/transfers_up.py"
            "cargue_datos_crudos_base_retiros/cargue_datos_crudos_retiros.py"
            
            # Reportes y Otros
            "cargue_datos_crudos_reports_comercial/reports_comercial.py"
            "cargue_datos_crudos_reportes_alertas/reportes_alertas.py"
            "cargue_datos_crudos_base_recursos/cargue_datos_crudos_recursos.py"
            "cargue_datos_crudos_otros_movimientos/otros_movimientos.py"
          )

          for script in "${ETL_SCRIPTS[@]}"; do
            if [ -f "$script" ]; then
              echo "🔄 Ejecutando: $script"
              python "$script" \
                --environment=${{ github.event.inputs.environment }} \
                --mode=${{ github.event.inputs.execution_mode }} \
                --data-path="${{ env.TEST_DATA_PATH }}" \
                --log-path="${{ env.LOG_PATH }}" \
                --config-path="${{ env.CONFIG_PATH }}" \
                --batch-size=1000 \
                --retry-attempts=3
              
              if [ $? -eq 0 ]; then
                echo "✅ Ejecución exitosa: $script"
              else
                echo "❌ Error en ejecución: $script"
                if [ "${{ github.event.inputs.execution_mode }}" = "full" ]; then
                  exit 1
                fi
              fi
            else
              echo "⚠️ Script no encontrado: $script"
            fi
          done

      - name: Process Test Results
        if: always()
        run: |
          python scripts/process_results.py \
            --log-path=${{ env.LOG_PATH }} \
            --output-path=./test-results

      - name: Archive Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-test-results-${{ github.run_id }}
          path: |
            ./test-results/
            ${{ env.LOG_PATH }}/
            ./coverage.xml
          compression-level: 9
          retention-days: 30
          overwrite: true
          if-no-files-found: warn

      - name: Generate Artifact Manifest
        if: always()
        run: |
          echo "ETL Test Results - Run ID: ${{ github.run_id }}" > artifact-manifest.txt
          echo "Generated on: $(date)" >> artifact-manifest.txt
          echo "Environment: ${{ github.event.inputs.environment }}" >> artifact-manifest.txt
          echo "Mode: ${{ github.event.inputs.execution_mode }}" >> artifact-manifest.txt

      - name: Upload Manifest
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: etl-manifest-${{ github.run_id }}
          path: artifact-manifest.txt
          retention-days: 90

  integration-test:
    needs: validate-and-test
    runs-on: ubuntu-latest
    if: github.event.inputs.execution_mode == 'full'
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Test Environment
        run: docker-compose -f docker-compose.test.yml up -d

      - name: Run Integration Tests
        run: |
          docker exec etl-test python -m pytest \
            --integration \
            --cov=. \
            --cov-report=xml

      - name: Cleanup
        if: always()
        run: docker-compose -f docker-compose.test.yml down