# ====================================================================
# Pipeline para validaci√≥n de scripts ETL
# ====================================================================

name: ETL Validation Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de validaci√≥n'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - staging

env:
  PYTHON_VERSION: '3.10'

jobs:
  validate-scripts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint pytest

      - name: Validate ETL Scripts
        run: |
          ETL_SCRIPTS=(
            # Cancelaciones
            "cargue_datos_crudos_base_canceladas/cargue_datos_crudos_canceladas.py"
            "cargue_datos_crudos_base_canceladas_999/cargue_datos_crudos_canceladas_999.py"
            
            # Digitaciones
            "cargue_datos_crudos_base_digitadas/cargue_datos_crudos_digitadas.py"
            "cargue_datos_crudos_base_digitadas_up/cargue_datos_crudos_digitadas_up.py"
            "cargue_datos_crudos_denodo_digitadas_rr/cargue_datos_crudos_digitadas_rr.py"
            
            # Instalaciones
            "cargue_datos_crudos_base_instaladas/cargue_datos_crudos_instaladas.py"
            "cargue_datos_crudos_base_instaladas_up/cargue_datos_crudos_instaladas_up.py"
            "cargue_datos_crudos_base_instaladas_999/cargue_datos_crudos_instaladas_999.py"
            
            # Servicios y Productos
            "cargue_datos_crudos_base_cloud/cargue_datos_crudos_cloud.py"
            "cargue_datos_crudos_base_ngn_larga_distancia_nacional/cargue_datos_crudos_base_ngn_larga_distancia_nacional.py"
            "cargue_datos_crudos_base_red_fttx/cargue_datos_crudos_red_fttx.py"
            "cargue_datos_crudos_servicios_movil/fuentes_cruda_servicios_movil.py"
            
            # Ventas y Comercial
            "cargue_datos_crudos_base_digitadas_comercial/fuentes_crudas_digitadas_comercial.py"
            "cargue_datos_crudos_ventas_manuales/Ventas_manuales.py"
            "cargue_datos_crudos_valor_agregado/cargue_datos_crudos_valor_agregado.py"
            "cargue_datos_crudos_base_liquidacion_fija/cargue_datos_crudos_liquidacion_fija.py"
            
            # Legalizaciones y Conciliaciones
            "cargue_datos_crudos_legalizadas/cargue_datos_crudos_legalizadas.py"
            "cargue_datos_crudos_conciliaciones/conciliaciones.py"
            "cargue_datos_crudos_conciliaciones_up/conciliaciones_up.py"
            
            # Metas y Planeaci√≥n
            "cargue_datos_crudos_metas/cargue_datos_crudos_metas.py"
            "cargue_datos_crudos_metas_oficial/cargue_datos_crudos_metas_oficial.py"
            "cargue_datos_crudos_planta_comercial/cargue_datos_crudos_planta_comercial.py"
            
            # Causales y Estados
            "cargue_datos_crudos_causales/fuentes_crudas_causales.py"
            "cargue_datos_crudos_estados_ordenes/estados_ordenes.py"
            
            # Transfers y Movimientos
            "cargue_datos_crudos_transfers/transfers_crudos.py"
            "cargue_datos_crudos_transfers_up/transfers_up.py"
            "cargue_datos_crudos_base_retiros/cargue_datos_crudos_retiros.py"
            
            # Reportes y Otros
            "cargue_datos_crudos_reports_comercial/reports_comercial.py"
            "cargue_datos_crudos_reportes_alertas/reportes_alertas.py"
            "cargue_datos_crudos_base_recursos/cargue_datos_crudos_recursos.py"
            "cargue_datos_crudos_otros_movimientos/otros_movimientos.py"
          )

          VALIDATION_FAILED=0
          
          for script in "${ETL_SCRIPTS[@]}"; do
            echo "üîç Validando: $script"
            
            # Verificar existencia
            if [ ! -f "$script" ]; then
              echo "‚ùå No encontrado: $script"
              VALIDATION_FAILED=1
              continue
            fi

            # Verificar sintaxis
            if ! python -m py_compile "$script"; then
              echo "‚ùå Error de sintaxis: $script" 
              VALIDATION_FAILED=1
              continue
            fi

            # Verificar imports
            if ! python -c "import py_compile; py_compile.compile('$script')"; then
              echo "‚ùå Error en imports: $script"
              VALIDATION_FAILED=1
              continue  
            fi

            echo "‚úÖ Validaci√≥n exitosa: $script"
          done

          exit $VALIDATION_FAILED