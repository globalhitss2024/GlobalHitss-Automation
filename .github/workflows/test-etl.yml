# ====================================================================
# DEPRECATED: This pipeline has been replaced by azure-pipelines.yml
# Please use azure-pipelines.yml for all CI/CD operations
# ====================================================================

name: Test ETL Pipeline

on:
  push:
    branches:
      - main
      - develop
      - 'feature/*'
    paths:
      - '**/*.py'
      - 'requirements.txt'
      - '.github/workflows/*.yml'
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint pytest pytest-cov bandit safety

      - name: Security check dependencies
        run: safety check
        continue-on-error: true

      - name: Run linting
        run: pylint $(find . -name "*.py")
        continue-on-error: true

      - name: Security scan
        run: bandit -r .
        continue-on-error: true

      - name: Run tests with coverage
        run: pytest --cov=. --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

      - name: Validate Python Scripts
        run: |
          echo "üîç Validando sintaxis de scripts Python..."
          for file in $(find . -name "*.py"); do
            echo "Checking $file"
            python -m py_compile "$file"
          done

      - name: Run ETL Tests
        run: |
          echo "üß™ Ejecutando pruebas de ETL..."
          scripts=(
            "cargue_datos_crudos_base_canceladas/cargue_datos_crudos_canceladas.py"
            "cargue_datos_crudos_base_canceladas_999/cargue_datos_crudos_canceladas_999.py"
            "cargue_datos_crudos_base_digitadas/cargue_datos_crudos_digitadas.py"
          )
          
          for script in "${scripts[@]}"; do
            if [ -f "$script" ]; then
              echo "üìù Probando: $script"
              python "$script" --test-mode
            else
              echo "‚ö†Ô∏è Script no encontrado: $script"
            fi
          done

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and test Docker image
        run: |
          docker build -t etl-automation:test .
          docker run --rm etl-automation:test pytest