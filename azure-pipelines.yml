# ====================================================================
# Pipeline CI/CD para Automatizaci√≥n ETL
# Hey! Este pipeline ejecuta todos nuestros ETLs :)
# Por: Johana Perez
# √öltima actualizaci√≥n: Junio 2025 
# ====================================================================

# Configuraci√≥n de triggers - cu√°ndo se ejecuta el pipeline
trigger:
  branches:
    include:
    - main      # Para pasar a producci√≥n
    - develop   # Para pruebas
    - feature/* # Para nuevas funciones
  paths:
    include:
    - '**/*.py'            # Solo archivos Python
    - 'requirements.txt'    # Y dependencias
    - 'azure-pipelines.yml'
    - 'infrastructure/**'

# Las herramientas que necesitamos
variables:
  - name: pythonVersion
    value: '3.10'  # Versi√≥n estable que usamos
  - name: projectRoot
    value: '$(System.DefaultWorkingDirectory)'
  
  # Azure Configuration
  - name: azureServiceConnection
    value: 'etl-service-connection'
  - name: azureStorageAccount
    value: 'etlstorageacct'
  - name: azureKeyVault
    value: 'etl-key-vault'
  - name: azureFunctionApp
    value: 'etl-function-app'
  - name: azureDataFactory
    value: 'etl-data-factory'
  
  # Control de ejecuci√≥n
  - name: batchSize
    value: 1000
  - name: maxRetries
    value: 3
  - name: timeoutMinutes
    value: 120

  # Secret Groups
  - group: production-secrets
  - group: azure-credentials

# Usamos Ubuntu porque es m√°s ligero y r√°pido
pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: Prepare
    steps:
    # Setup inicial
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true
      displayName: 'Configurando Python'

    # Cache para optimizar tiempo de build
    - task: Cache@2
      inputs:
        key: 'python | "$(Agent.OS)" | requirements.txt'
        restoreKeys: |
          python | "$(Agent.OS)"
        path: $(Pipeline.Workspace)/.pip
      displayName: 'Cache de paquetes'

    # Instalamos todo lo necesario
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint pytest pytest-cov bandit safety  # Herramientas de testing
      displayName: 'Instalando dependencias'

    - script: |
        safety check
      displayName: 'Check dependencies for security vulnerabilities'
      continueOnError: true

    - script: |
        pylint $(find . -name "*.py")
      displayName: 'Run linting'
      continueOnError: true

    - script: |
        bandit -r .
      displayName: 'Security scan'
      continueOnError: true

    - script: |
        pytest --cov=. --cov-report=xml
      displayName: 'Run tests'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage.xml'
      displayName: 'Publish code coverage'

  - job: TestETLScripts
    displayName: 'Test ETL Scripts'
    dependsOn: Prepare 
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
        addToPath: true

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          $scripts = @(
            # Procesos Base
            "cargue_datos_crudos_base_canceladas/cargue_datos_crudos_canceladas.py",
            "cargue_datos_crudos_base_canceladas_999/cargue_datos_crudos_canceladas_999.py",
            "cargue_datos_crudos_base_digitadas/cargue_datos_crudos_digitadas.py",
            "cargue_datos_crudos_base_digitadas_up/cargue_datos_crudos_digitadas_up.py",
            "cargue_datos_crudos_base_digitadas_comercial/fuentes_crudas_digitadas_comercial.py",
            
            # Instalaciones y Servicios
            "cargue_datos_crudos_base_instaladas/cargue_datos_crudos_instaladas.py",
            "cargue_datos_crudos_base_instaladas_up/cargue_datos_crudos_instaladas_up.py",
            "cargue_datos_crudos_base_instaladas_999/cargue_datos_crudos_instaladas_999.py",
            "cargue_datos_crudos_base_cloud/cargue_datos_crudos_cloud.py",
            "cargue_datos_crudos_servicios_movil/fuentes_cruda_servicios_movil.py",
            
            # Red y Distancia
            "cargue_datos_crudos_base_red_fttx/cargue_datos_crudos_red_fttx.py",
            "cargue_datos_crudos_base_ngn_larga_distancia_nacional/cargue_datos_crudos_base_ngn_larga_distancia_nacional.py",
            
            # Ventas y Comercial
            "cargue_datos_crudos_ventas_manuales/Ventas_manuales.py",
            "cargue_datos_crudos_valor_agregado/cargue_datos_crudos_valor_agregado.py",
            "cargue_datos_crudos_base_liquidacion_fija/cargue_datos_crudos_liquidacion_fija.py",
            "cargue_datos_crudos_planta_comercial/cargue_datos_crudos_planta_comercial.py",
            "cargue_datos_crudos_reports_comercial/reports_comercial.py",
            
            # Legalizaciones y Conciliaciones
            "cargue_datos_crudos_legalizadas/cargue_datos_crudos_legalizadas.py",
            "cargue_datos_crudos_conciliaciones/conciliaciones.py",
            "cargue_datos_crudos_conciliaciones_up/conciliaciones_up.py",
            
            # Metas y Planeaci√≥n
            "cargue_datos_crudos_metas/cargue_datos_crudos_metas.py",
            "cargue_datos_crudos_metas_oficial/cargue_datos_crudos_metas_oficial.py",
            
            # Causales y Estados
            "cargue_datos_crudos_causales/fuentes_crudas_causales.py",
            "cargue_datos_crudos_estados_ordenes/estados_ordenes.py",
            
            # Denodo y RR
            "cargue_datos_crudos_denodo_digitadas_rr/cargue_datos_crudos_digitadas_rr.py",
            
            # Transfers y Movimientos
            "cargue_datos_crudos_transfers/transfers_crudos.py",
            "cargue_datos_crudos_transfers_up/transfers_up.py",
            "cargue_datos_crudos_base_retiros/cargue_datos_crudos_retiros.py",
            "cargue_datos_crudos_otros_movimientos/otros_movimientos.py",
            
            # Reportes y Alertas
            "cargue_datos_crudos_reportes_alertas/reportes_alertas.py",
            "cargue_datos_crudos_base_recursos/cargue_datos_crudos_recursos.py"
          )

          foreach ($script in $scripts) {
            Write-Host "üîÑ Ejecutando: $script"
            
            # Configurar variables de Azure
            $env:AZURE_STORAGE_CONNECTION = "$(azureStorageConnection)"
            $env:AZURE_KEYVAULT_URL = "$(azureKeyVaultUrl)"
            
            try {
              python $script `
                --environment="$(environment)" `
                --azure-storage="$(azureStorageAccount)" `
                --azure-keyvault="$(azureKeyVault)" `
                --batch-size="$(batchSize)" `
                --max-retries="$(maxRetries)"
                
              if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ √âxito: $script"
              } else {
                Write-Host "‚ùå Error (c√≥digo: $LASTEXITCODE)"
                exit 1
              }
            } catch {
              Write-Error "‚ùå Error en $script : $_"
              exit 1
            }
          }

    # Tareas de Azure
    - task: AzureWebApp@1
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        appName: '$(azureFunctionApp)'
        package: '$(System.DefaultWorkingDirectory)'
        deploymentMethod: 'auto'

    - task: AzureDataFactory@2
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        DataFactoryName: '$(azureDataFactory)'
        Location: 'East US'

- stage: DevDeploy
  displayName: 'Deploy to Development'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  variables:
    - group: dev-secrets
  jobs:
  - deployment: DeployDev
    environment: 'development'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/deploy-steps.yml
            parameters:
              environment: 'development'

- stage: ProdDeploy
  displayName: 'Deploy to Production'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    - group: prod-secrets
  jobs:
  - deployment: DeployProd
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - template: templates/deploy-steps.yml
            parameters:
              environment: 'production'

- stage: PostDeploy
  displayName: 'Post Deployment Tasks'
  dependsOn: 
  - DevDeploy
  - ProdDeploy
  condition: succeeded()
  jobs:
  - job: Monitoring
    steps:
    - script: |
        echo "Configurando monitoreo y alertas..."
      displayName: 'Setup monitoring'

  - job: Documentation
    steps:
    - script: |
        echo "Generando documentaci√≥n..."
      displayName: 'Generate documentation'

- stage: AzureMigration
  displayName: 'Azure Migration'
  dependsOn: ProdDeploy
  condition: succeeded()
  jobs:
  - deployment: MigrateData
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzurePowerShell@5
            inputs:
              azureSubscription: '$(azureServiceConnection)'
              ScriptType: 'InlineScript'
              Inline: |
                # Migraci√≥n de datos
                Write-Host "Iniciando migraci√≥n a Azure..."
                
                # Storage Account
                $storageAccount = Get-AzStorageAccount `
                  -ResourceGroupName $(resourceGroup) `
                  -Name $(azureStorageAccount)
                
                # Containers
                New-AzStorageContainer -Name "raw-data" -Permission Off
                New-AzStorageContainer -Name "processed-data" -Permission Off
                New-AzStorageContainer -Name "archive" -Permission Off
                
                # Key Vault
                $keyVault = Get-AzKeyVault `
                  -ResourceGroupName $(resourceGroup) `
                  -VaultName $(azureKeyVault)
                
                # Secrets
                foreach ($secret in Get-AzKeyVaultSecret -VaultName $(azureKeyVault)) {
                  Write-Host "Configurando secreto: $($secret.Name)"
                }
                
                Write-Host "Migraci√≥n completada"
              pwsh: true
              
  - job: ValidateMigration
    dependsOn: MigrateData
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: 'pscore'
        scriptLocation: 'inlineScript'
        inlineScript: |
          # Validaci√≥n post-migraci√≥n
          Write-Host "Validando migraci√≥n..."
          
          # Verificar recursos
          az storage account show --name $(azureStorageAccount)
          az keyvault show --name $(azureKeyVault)
          az functionapp show --name $(azureFunctionApp)
          
          # Verificar datos
          az storage blob list --account-name $(azureStorageAccount) --container-name "raw-data"
          
          Write-Host "Validaci√≥n completada"

